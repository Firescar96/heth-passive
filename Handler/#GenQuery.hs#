{-# FlexibleStrings #-}

module Handler.GenQuery where

import Import

import Data.Aeson
import qualified Blockchain.Data.DataDefs as DD
import Data.ByteString.Lazy as BS
import Database.Persist
import Database.Persist.TH
import Database.Persist.Postgresql

import qualified Database.Esqueleto as E
       
import Handler.PQuery
import Data.List
import Data.Maybe
       
import qualified Prelude as P

getGenQueryR :: Handler Value
getGenQueryR = do
                 addHeader "Access-Control-Allow-Origin" "*"
                 getParameters <- reqGetParams <$> getRequest
                 let query = Import.lookup "querytype" getParameters :: Maybe Text
                 let mjs = (case query of
                               Nothing -> decode "{\"gquery\":[{\"querytype\":\"Query Type cannot be null\"}]}"
                               (Just "block") ->  decode "{\"gquery\":[{\"querytype\":\"block\"}]}"
                               (Just "blockwhash") -> decode "{\"gquery\":[{\"querytype\":\"blockwhash\"}]}"
                               (Just "account") -> decode "{\"gquery\":[{\"querytype\":\"account\"}]}"
                               (Just "accountwaddress") -> decode "{\"gquery\":[{\"querytype\":\"accountwaddress\"}]}"
                               (Just "transaction") ->  decode "{\"gquery\":[{\"querytype\":\"transaction\"}]}"
                               (Just "transactionwfrom") -> decode "{\"gquery\":[{\"querytype\":\"transactionwithfrom\"}]}"
                               _ -> decode "{\"gquery\":[{\"querytype\":\"Unrecognized Query\"}]}")
                 returnJson . fromJust mjs

reqToFilters :: [(ParamName, ParamValue)] -> E.expr (Value Bool)
reqToFilters 